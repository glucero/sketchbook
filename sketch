#!/usr/bin/ruby

class Sketch

  # directory hierarchy
  ProjectName          = ARGV.join('_').downcase.tr('-', '_')
  SketchbookPath       = File.expand_path('.')
    ProjectDir         = File.join(SketchbookPath, ProjectName)
      ProjectFilename  = File.join(ProjectName, 'project.clj')
      SourceDir        = File.join(ProjectName, 'src')
        CoreDir        = File.join(SourceDir, ProjectName)
          CoreFilename = File.join(CoreDir, 'core.clj')

  def project_file
<<-FILE
(defproject #{ProjectName.tr('_', '-')} "0.1.0"
  :description "#{ProjectName.tr('_', ' ')}"
  :dependencies [ [org.clojure/clojure "1.4.0"],
                  [quil "1.6.0"] ]
  :main #{ProjectName.tr('_', '-')}.core)
FILE
  end

  def core_file
<<-FILE
(ns #{ProjectName.tr('_', '-')}.core
  (:use quil.core))

(def window {:width, 256, :height, 256})

(def animation-frame (atom 0N))

(defn draw []'
  ;
  ; put code here
  ;
  (swap! animation-frame inc))

(defn setup []
  (frame-rate 60)'
  (background 0))'

(defn -main []'
  (quil.core/defsketch #{ProjectName.tr('_', '-')}
    :title "#{ProjectName.tr('_', ' ')}"
    :setup setup
    :draw  draw
    :size [(:width window) (:height window)]))
FILE
  end

  def create_directory(directory)
    if File.directory? directory
      @steps << [:complete, 'SketchbookError', "The directoy '#{directory}' already exists."]
    else
      Dir.mkdir directory
    end
  end

  def create_file(path, contents)
    if File.exist? path
      @steps << [:complete, 'SketchbookError', "The file #{path} already exists."]
    else
      File.open(path, 'w') { |file| file.write contents }
    end
  end

  def complete(*messages)
    puts *messages

    @steps.clear
  end

  def start
    if ProjectName.empty?
      @steps << [:complete, 'SketchbookError', 'Please enter a sketch name.']
    end
  end

  def perform_next_action
    send *@steps.pop if @steps.any?
  rescue => error
    @steps << [:complete, error.message, error.backtrace]
  end

  def done?
    @steps.empty?
  end

  def initialize
    @steps = [].tap do |steps|
      steps << [:complete, "Sketch '#{ProjectName}' created."]
      steps << [:create_file, CoreFilename, core_file]
      steps << [:create_file, ProjectFilename, project_file]
      steps << [:create_directory, CoreDir]
      steps << [:create_directory, SourceDir]
      steps << [:create_directory, ProjectDir]
      steps << [:start]
    end

    yield self
  end
end

Sketch.new do |sketch|
  until sketch.done?
    sketch.perform_next_action
  end
end


